/*
 * This file is generated by jOOQ.
 */
package com.mashuq.sarf.generated.tables;


import com.mashuq.sarf.generated.Keys;
import com.mashuq.sarf.generated.Sarf;
import com.mashuq.sarf.generated.tables.records.VerbListRecord;

import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row3;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class VerbList extends TableImpl<VerbListRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>sarf.verb_list</code>
     */
    public static final VerbList VERB_LIST = new VerbList();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<VerbListRecord> getRecordType() {
        return VerbListRecord.class;
    }

    /**
     * The column <code>sarf.verb_list.id</code>.
     */
    public final TableField<VerbListRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>sarf.verb_list.verb</code>.
     */
    public final TableField<VerbListRecord, String> VERB = createField(DSL.name("verb"), SQLDataType.VARCHAR(256), this, "");

    /**
     * The column <code>sarf.verb_list.processed</code>.
     */
    public final TableField<VerbListRecord, Byte> PROCESSED = createField(DSL.name("processed"), SQLDataType.TINYINT.nullable(false).defaultValue(DSL.inline("0", SQLDataType.TINYINT)), this, "");

    private VerbList(Name alias, Table<VerbListRecord> aliased) {
        this(alias, aliased, null);
    }

    private VerbList(Name alias, Table<VerbListRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>sarf.verb_list</code> table reference
     */
    public VerbList(String alias) {
        this(DSL.name(alias), VERB_LIST);
    }

    /**
     * Create an aliased <code>sarf.verb_list</code> table reference
     */
    public VerbList(Name alias) {
        this(alias, VERB_LIST);
    }

    /**
     * Create a <code>sarf.verb_list</code> table reference
     */
    public VerbList() {
        this(DSL.name("verb_list"), null);
    }

    public <O extends Record> VerbList(Table<O> child, ForeignKey<O, VerbListRecord> key) {
        super(child, key, VERB_LIST);
    }

    @Override
    public Schema getSchema() {
        return Sarf.SARF;
    }

    @Override
    public Identity<VerbListRecord, Integer> getIdentity() {
        return (Identity<VerbListRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<VerbListRecord> getPrimaryKey() {
        return Keys.KEY_VERB_LIST_PRIMARY;
    }

    @Override
    public List<UniqueKey<VerbListRecord>> getKeys() {
        return Arrays.<UniqueKey<VerbListRecord>>asList(Keys.KEY_VERB_LIST_PRIMARY, Keys.KEY_VERB_LIST_VERB_UNIQUE);
    }

    @Override
    public VerbList as(String alias) {
        return new VerbList(DSL.name(alias), this);
    }

    @Override
    public VerbList as(Name alias) {
        return new VerbList(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public VerbList rename(String name) {
        return new VerbList(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public VerbList rename(Name name) {
        return new VerbList(name, null);
    }

    // -------------------------------------------------------------------------
    // Row3 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row3<Integer, String, Byte> fieldsRow() {
        return (Row3) super.fieldsRow();
    }
}
