/*
 * This file is generated by jOOQ.
 */
package com.mashuq.sarf.gen.tables;


import com.mashuq.sarf.gen.Keys;
import com.mashuq.sarf.gen.Sarf;
import com.mashuq.sarf.gen.tables.records.VerbRecord;

import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row3;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Verb extends TableImpl<VerbRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>sarf.verb</code>
     */
    public static final Verb VERB = new Verb();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<VerbRecord> getRecordType() {
        return VerbRecord.class;
    }

    /**
     * The column <code>sarf.verb.id</code>.
     */
    public final TableField<VerbRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>sarf.verb.verb</code>.
     */
    public final TableField<VerbRecord, String> VERB_ = createField(DSL.name("verb"), SQLDataType.VARCHAR(256), this, "");

    /**
     * The column <code>sarf.verb.processed</code>.
     */
    public final TableField<VerbRecord, Byte> PROCESSED = createField(DSL.name("processed"), SQLDataType.TINYINT.nullable(false).defaultValue(DSL.inline("0", SQLDataType.TINYINT)), this, "");

    private Verb(Name alias, Table<VerbRecord> aliased) {
        this(alias, aliased, null);
    }

    private Verb(Name alias, Table<VerbRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>sarf.verb</code> table reference
     */
    public Verb(String alias) {
        this(DSL.name(alias), VERB);
    }

    /**
     * Create an aliased <code>sarf.verb</code> table reference
     */
    public Verb(Name alias) {
        this(alias, VERB);
    }

    /**
     * Create a <code>sarf.verb</code> table reference
     */
    public Verb() {
        this(DSL.name("verb"), null);
    }

    public <O extends Record> Verb(Table<O> child, ForeignKey<O, VerbRecord> key) {
        super(child, key, VERB);
    }

    @Override
    public Schema getSchema() {
        return Sarf.SARF;
    }

    @Override
    public Identity<VerbRecord, Integer> getIdentity() {
        return (Identity<VerbRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<VerbRecord> getPrimaryKey() {
        return Keys.KEY_VERB_PRIMARY;
    }

    @Override
    public List<UniqueKey<VerbRecord>> getKeys() {
        return Arrays.<UniqueKey<VerbRecord>>asList(Keys.KEY_VERB_PRIMARY, Keys.KEY_VERB_VERB_UNIQUE);
    }

    @Override
    public Verb as(String alias) {
        return new Verb(DSL.name(alias), this);
    }

    @Override
    public Verb as(Name alias) {
        return new Verb(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Verb rename(String name) {
        return new Verb(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Verb rename(Name name) {
        return new Verb(name, null);
    }

    // -------------------------------------------------------------------------
    // Row3 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row3<Integer, String, Byte> fieldsRow() {
        return (Row3) super.fieldsRow();
    }
}
